@model SortingHatGraphs.Models.ListModel

<div class="jumbotron">
    <h1>QuickSort</h1>
    <p class="lead">Small application the sorts a given list using QuickSort and displays each step when sorting</p>
</div>
<div class="row">
    <div class="col-md-6">
        <canvas id="graph"></canvas>
    </div>
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" id="txtCtlList" class="form-control" placeholder="Enter list of integers seperated with ','">

            <span class="input-group-btn">
                <button type="button" id="btnSort" class="btn btn-primary" value="Sort">Perform Sort</button>
            </span>

        </div>
        <div id="dataDiv"></div>


        <input type="hidden" id="hdnCurrenStep" value="0" />
        <input type="hidden" id="hdnList" />
    </div>
</div>

@section scripts
{
    <script src="~/Scripts/Chart.min.js" type="text/javascript"></script>
    <script src="~/Scripts/Chart.bundle.min.js" type="text/javascript"></script>
    <script>

        $(document).ready(function () {
            // Variable timer to update the graph to show the sort procedure
            var graphUpdateTimer;

            // The data for the graph
            var barChartData = {
                labels: [],
                datasets: [{
                    label: 'Sort Graph',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 0.2)',
                    borderWidth: 1,
                    data: []
                }]
            };


            $("#txtCtlList").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter . and ,
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 188]) !== -1 ||
                    // Allow: Ctrl+A, Command+A
                    (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: home, end, left, right, down, up
                    (e.keyCode >= 35 && e.keyCode <= 40)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });

            $("#btnSort").click(function (e) {
                if ($("#txtCtlList").val() == "") {
                    alert("List cannot be empty");
                }
                else if ($("#txtCtlList").val().indexOf(',') == 0) {
                    alert("List needs to contain ','");
                }
                else {
                    // Split up the string into an array
                    var list = $("#txtCtlList").val().split(',');
                    list = list.map(Number);
                    $.ajax({
                        type: "POST",
                        url: "/QuickSort/Sort",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ List: list }),
                        dataType: "html",
                        success: function (result, status, xhr) {

                            $("#hdnList").html(result);

                            // Render the list and indices on the chart
                            var list = (JSON.parse(result))[0].List;
                            var indexOne = JSON.parse(result)[0].IndexOne;
                            var indexTwo = JSON.parse(result)[0].IndexTwo;

                            // Also store which colors, label, and data to display
                            var color = [];
                            var labels = [];
                            var newData = [];

                            for (var i = 0; i < list.length; i++) {
                                labels.push(i);
                                newData.push(list[i]);

                                if (i == indexOne || i == indexTwo) {
                                    color.push('rgba(255, 99, 132, 0.8)');
                                }
                                else {
                                    color.push('rgba(255, 99, 132, 0.2)');
                                }
                            }

                            barChartData.labels = labels;
                            barChartData.datasets[0].data = newData;
                            barChartData.datasets[0].backgroundColor = color;
                            barChartData.datasets[0].borderColor = color;

                            graph.update();

                            $("#hdnCurrenStep").val(0);

                            // Set timer to update graph
                            clearTimeout(graphUpdateTimer);
                            graphUpdateTimer = setTimeout(updateGraph, 500);

                        },
                        error: function (xhr, status, error) {
                            $("#dataDiv").html("Result: " + status + " " + error + " " + xhr.status + " " + xhr.statusText)
                        }
                    });
                }
                return false;
            });

            function updateGraph() {
                // Increment to the next step
                var nextStep = parseInt($("#hdnCurrenStep").val());
                nextStep = nextStep + 1;

                // Check if the next step is outside of list
                var data = (JSON.parse($("#hdnList").html()))
                if (nextStep == data.length) {
                    // End of list, reset back to 0
                    nextStep = 0;
                }

                $("#hdnCurrenStep").val(nextStep);
                data = data[nextStep];
                var list = data.List;

                var indexOne = data.IndexOne;
                var indexTwo = data.IndexTwo;


                var color = [];
                var labels = [];
                var newData = [];

                for (var i = 0; i < list.length; i++) {
                    labels.push(i);
                    newData.push(list[i]);

                    if (i == indexOne || i == indexTwo) {
                        color.push('rgba(255, 99, 132, 0.8)');
                    }
                    else {
                        color.push('rgba(255, 99, 132, 0.2)');
                    }
                }

                barChartData.labels = labels;
                barChartData.datasets[0].data = newData;
                barChartData.datasets[0].backgroundColor = color;
                barChartData.datasets[0].borderColor = color;

                graph.update();

                // Set timer to update graph
                clearTimeout(graphUpdateTimer);
                graphUpdateTimer = setTimeout(updateGraph, 500);
            }

            var ctx = document.getElementById("graph").getContext('2d');
            var graph = new Chart(ctx, {
                type: 'bar',
                data: barChartData,
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    }
                }
            });


        });
    </script>

}
